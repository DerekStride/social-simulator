require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SocialUsersController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # SocialUser. As you add validations to SocialUser, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { name: 'Human' }
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SocialUsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    let(:social_user) { create :social_user }

    it 'assigns all social_users as @social_users' do
      get :index, {}, valid_session
      expect(assigns(:social_users)).to eq([social_user])
    end
  end

  describe 'GET #show' do
    let(:social_user) { create :social_user }

    it 'assigns the requested social_user as @social_user' do
      get :show, { id: social_user.to_param }, valid_session
      expect(assigns(:social_user)).to eq(social_user)
    end
  end

  describe 'GET #new' do
    it 'assigns a new social_user as @social_user' do
      get :new, {}, valid_session
      expect(assigns(:social_user)).to be_a_new(SocialUser)
    end
  end

  describe 'GET #edit' do
    let(:social_user) { create :social_user }

    it 'assigns the requested social_user as @social_user' do
      get :edit, { id: social_user.to_param }, valid_session
      expect(assigns(:social_user)).to eq(social_user)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new SocialUser' do
        expect {
          post :create, { social_user: valid_attributes }, valid_session
        }.to change(SocialUser, :count).by(1)
      end

      it 'assigns a newly created social_user as @social_user' do
        post :create, { social_user: valid_attributes }, valid_session
        expect(assigns(:social_user)).to be_a(SocialUser)
        expect(assigns(:social_user)).to be_persisted
      end

      it 'redirects to the created social_user' do
        post :create, { social_user: valid_attributes }, valid_session
        expect(response).to redirect_to(SocialUser.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved social_user as @social_user' do
        post :create, { social_user: invalid_attributes }, valid_session
        expect(assigns(:social_user)).to be_a_new(SocialUser)
      end

      it 're-renders the "new" template' do
        post :create, { social_user: invalid_attributes }, valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:social_user) { create :social_user }
      let(:new_attributes) do
        { name: 'Zombie' }
      end

      it 'updates the requested social_user' do
        put :update, { id: social_user.to_param, social_user: new_attributes }, valid_session
        social_user.reload
        expect(assigns(:social_user).name).to eq('Zombie')
      end

      it 'assigns the requested social_user as @social_user' do
        put :update, { id: social_user.to_param, social_user: valid_attributes }, valid_session
        expect(assigns(:social_user)).to eq(social_user)
      end

      it 'redirects to the social_user' do
        put :update, { id: social_user.to_param, social_user: valid_attributes }, valid_session
        expect(response).to redirect_to(social_user)
      end
    end

    context 'with invalid params' do
      let(:social_user) { create :social_user }

      it 'assigns the social_user as @social_user' do
        put :update, { id: social_user.to_param, social_user: invalid_attributes }, valid_session
        expect(assigns(:social_user)).to eq(social_user)
      end

      it 're-renders the "edit" template' do
        put :update, { id: social_user.to_param, social_user: invalid_attributes }, valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    let!(:social_user) { create :social_user }

    it 'destroys the requested social_user' do
      expect {
        delete :destroy, { id: social_user.to_param }, valid_session
      }.to change(SocialUser, :count).by(-1)
    end

    it 'redirects to the social_users list' do
      delete :destroy, { id: social_user.to_param }, valid_session
      expect(response).to redirect_to(social_users_url)
    end
  end
end
